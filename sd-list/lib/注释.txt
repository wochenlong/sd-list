// 定义常量 MODELS_ENDPOINT 和 OPTIONS_ENDPOINT 分别表示模型列表和 VAE 列表的 API 端点
const MODELS_ENDPOINT = "/sdapi/v1/sd-models";
const OPTIONS_ENDPOINT = "/sdapi/v1/options";

// 定义模块的主要函数 apply，接收两个参数：Context 和 Config
export function apply(ctx: Context, config: Config) {
  // 使用 Context 对象创建一个命令，该命令名为 "查看模型"，别名为 "模型列表"，当执行该命令时会调用一个异步函数
  const cmd = ctx
    .command("查看模型")
    .alias("模型列表")
    .action(async ({ session }) => {
      // 定义一个空数组 models，一个字符串 vae 和一个字符串 model 用于存储当前选择的模型和 VAE
      const models = [];
      let vae = "";
      let model = "";

      // 定义函数 input，该函数接收一个数字参数 max，返回用户输入的数字（如果输入的数字符合要求）
      async function input(max: number) {
        const value = +(await session.prompt(config.inputTimeout));
        if (
          value * 0 === 0 &&
          Math.floor(value) === value &&
          value > 0 &&
          value <= max
        ) {
          return value;
        }
        // 如果输入的数字不符合要求，向用户发送一个错误消息，并抛出一个 Error
        session.send(session.text(".inputErr"));
        throw new Error("inputErr");
      }

      // 定义函数 getInfo，该函数向 API 发送请求获取当前选择的模型和 VAE
      async function getInfo() {
        // 向用户发送一个查询中的消息
        session.send(session.text(".inQuery"));
        try {
          const res = await ctx.http.axios(
            trimSlash(config.endpoint) + OPTIONS_ENDPOINT
          );
          // 将获取到的模型和 VAE 存储在 vae 和 model 变量中
          vae = res.data.sd_vae;
          model = res.data.sd_model_checkpoint;
        } catch (err) {
          // 如果获取模型和 VAE 失败，向用户发送一个查询失败的消息，并抛出一个 Error
          session.send(session.text(".queryErr"));
          throw err;
        }
      }

      // 定义函数 getModelList，该函数向 API 发送请求获取模型列表，并将列表中的模型名称存储在 models 数组中
      async function getModelList() {
        try {
          const res = await ctx.http.axios(
            trimSlash(config.endpoint) + MODELS_ENDPOINT
          );
          res.data.forEach((item) => models.push(item.title));
        } catch (err) {
          // 如果获取模型列表失败，向用户发送一个查询失败的消息，并抛出一个 Error
          session.send(session.text(".queryErr"));
          throw err;
        }
      }

      // 定义函数 sendInfo，该函数向用户发送当前选择的模型和 VAE，并提示用户切换模型或 VAE
      async function sendInfo() {
        // 向用户发送一个查询中的消息
        await getInfo();
        session.send(
          `当前模型为：${model}\n` +
            `当前 VAE 为：${vae}\n` +
            `输入 1 切换模型，输入 2 切换 VAE：`
        );
      }

      // 定义函数 sendModels，该函数向用户发送可用的模型列表，并提示用户切换模型
      async function sendModels() {
        // 向 API 发送请求获取模型列表
        await getModelList();
        session.send(
          "当前可用模型有：\n" +
            models.map((model, i) => `${i + 1}.${model}\n`).join("") +
            "\n回复模型序号切换模型"
        );
      }

      // 定义函数 sendVaes，该函数向用户发送可用的 VAE 列表，并提示用户切换 VAE
      async function sendVaes() {
        session.send(
          "当前可用 VAE 有：\n" +
            config.vaeList.map((vae, i) => `${i + 1}.${vae}\n`).join("") +
            "\n回复 VAE 序号切换 VAE"
        );
      }

      // 向用户发送一个欢迎消息，并提示用户输入 1 查看模型列表或输入 2 查看 VAE 列表
      session.send(
        "欢迎使用模型切换器，请回复数字选择以下功能：\n1.查看模型列表\n2.查看VAE列表"
      );

      // 监听用户输入，如果输入为 1，向用户发送模型列表并提示用户切换模型；如果输入为 2，向用户发送 VAE 列表并提示用户切换 VAE
      session.on("text", async (msg) => {
        if (msg === "1") {
          await sendModels();
          const index = await input(models.length);
          await ctx.http.axios.post(
            trimSlash(config.endpoint) + MODELS_ENDPOINT,
            { title: models[index - 1] }
          );
          session.send(`已切换至模型 ${models[index - 1]}`);
        } else if (msg === "2") {
          await sendVaes();
          const index = await input(config.vaeList.length);
          await ctx.http.axios.post(
            trimSlash(config.endpoint) + OPTIONS_ENDPOINT,
            { sd_vae: config.vaeList[index - 1] }
          );
          session.send(`已切换至 VAE ${config.vaeList[index - 1]}`);
        } else {
          // 如果用户输入的不是 1 或 2，向用户发送一个错误消息
          session.send(session.text(".inputErr"));
        }
      });
    });
  // 返回定义的命令
  return cmd;
}
